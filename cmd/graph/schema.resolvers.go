package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"errors"
	"strings"

	"github.com/syke99/example-gql/graph/model"
)

// CreateResponse is the resolver for the createResponse field.
func (r *mutationResolver) CreateResponse(ctx context.Context, input model.NewResponse) (*model.Response, error) {
	if r.Responses == nil {
		r.Responses = make(map[string]*model.Response)
	}

	lang := strings.ToLower(input.Language)

	response := &model.Response{
		Language: lang,
		Res:      input.Response,
	}

	r.Responses[lang] = response

	return response, nil
}

// Responses is the resolver for the responses field.
func (r *queryResolver) Responses(ctx context.Context, language string) ([]*model.Response, error) {
	lang := strings.ToLower(language)

	res, ok := r.Resolver.Responses[lang]
	if !ok {
		return nil, errors.New("response for given language not found")
	}

	return []*model.Response{res}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
